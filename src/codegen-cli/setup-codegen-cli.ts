import { runCommand } from './run-command';
import * as fs from 'fs';
import { writeFile, readFile } from 'fs/promises';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

async function main() {
    const argv = await yargs(hideBin(process.argv))
        .option('url', {
            alias: 'u',
            describe: 'Full GraphQL endpoint URL',
            type: 'string',
            default: 'http://localhost:4000',
        })
        .option('schema', {
            alias: 's',
            describe: 'Path to save the generated GraphQL schema file',
            type: 'string',
            default: 'schema.gql',
        })
        .option('header', {
            alias: 'h',
            describe: 'Optional authentication header for the get-graphql-schema command',
            type: 'string',
        })
        .help()
        .argv;

    if (argv.url) {
        await runCommand(
            argv.header ?
                `get-graphql-schema ${argv.url} > ${argv.schema} --header ${argv.header}` :
                `get-graphql-schema ${argv.url} > ${argv.schema}`
        );
    }

    if (!fs.existsSync(argv.schema)) throw new Error(`Schema: "${argv.schema}" was not found.`);

    const defaultGqlDir = 'gql/autogenerated-operations';
    await runCommand(`gqlg --schemaFilePath ${argv.schema} --destDirPath ${defaultGqlDir}`);
    console.log('Operations generated.');

    const codegenFile = 'codegen.ts';
    if (fs.existsSync(codegenFile)) {
        const existingContent = await readFile(codegenFile, 'utf8');
        const schemaRegex = /schema:\s*(['"`])(.+?)\1,/;
        const match = existingContent.match(schemaRegex);
        const newSchemaValue = `./${argv.schemaPath}`;
        if (match) {
            if (match[2] !== newSchemaValue) {
                const updatedContent = existingContent.replace(
                    schemaRegex,
                    `schema: '${newSchemaValue}',`
                );
                await writeFile(codegenFile, updatedContent, 'utf8');
                console.log('Updated schema path in codegen.ts');
            } else {
                console.log('codegen.ts already exists with the same schema path. Skipping update.');
            }
        } else {
            console.log('Could not locate the schema property in codegen.ts. Please update manually.');
        }
    } else {
        const codegenContent = `
        import type { CodegenConfig } from '@graphql-codegen/cli';

        const config: CodegenConfig = {
          overwrite: true,
          schema: './${argv.schema}',
          documents: [
            'gql/autogenerated-operations/**/*.gql',
          ],
          generates: {
            'gql/graphql.ts': {
              plugins: ['typescript', 'typescript-operations', 'typescript-generic-sdk'],
              config: {
                scalars: {
                  BigInt: 'bigint|number',
                  Date: 'string',
                },
              },
            },
          },
        };
        
        export default config;
        `;
        await writeFile(codegenFile, codegenContent, 'utf8');
        console.log('Generated codegen.ts');
    }

    await runCommand(`graphql-codegen --config ${codegenFile}`);

    console.log('TypeScript types generated.');

    console.log('CLI automation completed successfully.');
}

main().catch((err) => {
    console.error(err);
    process.exit(1);
});
