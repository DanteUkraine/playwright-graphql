#!/usr/bin/env node

import { runCommand } from './run-command';
import { existsSync } from 'fs';
import { dirname, resolve } from 'path';
import { writeFile, mkdir } from 'fs/promises';
import { hideBin } from 'yargs/helpers';
import { generate, loadCodegenConfig, CodegenConfig } from '@graphql-codegen/cli';
import yargs from 'yargs';
import prettier from 'prettier';

export async function configToFile(
    config: CodegenConfig,
    outputPath = './codegen.ts'
): Promise<void> {
    const configObjectString = inspectConfig(config);

    const fileContent = `/**
 * GraphQL Code Generator Configuration
 * @see https://the-guild.dev/graphql/codegen/docs/config-reference/codegen-config
 */
import type { CodegenConfig } from '@graphql-codegen/cli';

const config: CodegenConfig = ${configObjectString};

export default config;
`;

    const prettierOptions = await prettier.resolveConfig(process.cwd()) || {};
    const formattedContent = await prettier.format(fileContent, {
        ...prettierOptions,
        parser: 'typescript',
    });

    const resolvedPath = resolve(outputPath);
    await mkdir(dirname(resolvedPath), { recursive: true });
    await writeFile(resolvedPath, formattedContent, 'utf8');
}

function inspectConfig(obj: any, depth = 0): string {
    if (depth > 20) return '{/* Depth limit exceeded */}';

    if (obj === null) return 'null';
    if (obj === undefined) return 'undefined';

    // Handle functions (hooks, custom scalars, etc.)
    if (typeof obj === 'function') {

        return obj.toString();
    }

    if (typeof obj !== 'object') {

        return JSON.stringify(obj);
    }

    if (Array.isArray(obj)) {
        if (obj.length === 0) return '[]';
        const items = obj.map(item => inspectConfig(item, depth + 1));

        return `[${items.join(', ')}]`;
    }

    if (Object.keys(obj).length === 0) return '{}';

    const entries = Object.entries(obj).map(([key, value]) => {
        const formattedKey = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key)
            ? key
            : JSON.stringify(key);

        return `${formattedKey}: ${inspectConfig(value, depth + 1)}`;
    });

    return `{
  ${entries.join(',\n  ')}
}`;
}

function buildCodegenConfig(
    schemas: string[],
    documents: string[],
    gqlClients: string[],
    rawRequest: boolean,
): CodegenConfig {
    const config = {
        generates: gqlClients.reduce((acc: any, clientPath: string, currentIndex: number) => {
            acc[clientPath] = {
                schema: schemas[currentIndex],
                documents: [documents[currentIndex]],
                plugins: ['typescript', 'typescript-operations', 'typescript-generic-sdk'],
                config: {
                    rawRequest,
                    scalars: {
                        BigInt: 'bigint|number',
                        Date: 'string',
                    },
                },
            };

            return acc;
        }, {}),
    };

    return config;
}

async function getSchemasFromUrls(url: unknown[], schema: unknown[], header: unknown[] | undefined): Promise<boolean> {
    if (url.length === schema.length) {
        const apiCalls = url.map((url, index) => ({
            url,
            schema: schema[index]
        }));

        await Promise.all(apiCalls.map(async i => {
            await runCommand(
                header ?
                    `get-graphql-schema ${i.url} > ${i.schema} ${header.map(h => `-h "${h}"`).join(' ')}` :
                    `get-graphql-schema ${i.url} > ${i.schema}`
            );
            console.log(`Schema generated from "${i.url}" to "${i.schema}".`);
        }));

        return true;
    } else {
        console.log('Please provide equal count of url and schema parameters.');

        return false;
    }
}

async function appendCode(gqlFiles: string[], coverage: boolean) {
    const [importFragment, getSdkFragment] = coverage ?
        ['getSdkRequester, coverageLogger', 'coverageLogger(getSdk(getSdkRequester(apiContext, options, requestHandler)))'] :
        ['getSdkRequester', 'getSdk(getSdkRequester(apiContext, options, requestHandler))'];

    const graphqlAutogeneratedFileModification = `

// This additional logic appended by playwright-graphql cli to ensure seamless integration
import { ${importFragment} } from 'playwright-graphql';

export type APIRequestContext = Parameters<typeof getSdkRequester>[0];
export type RequesterOptions = Parameters<typeof getSdkRequester>[1] | string;
export type RequestHandler = Parameters<typeof getSdkRequester>[2];

export const getClient = (apiContext: APIRequestContext, options?: RequesterOptions, requestHandler?: RequestHandler) => ${getSdkFragment};

export type GqlAPI = ReturnType<typeof getClient>;

`;

    await Promise.all(
        gqlFiles.map(gqlClientFilePath => writeFile(gqlClientFilePath, graphqlAutogeneratedFileModification, { flag: 'a' }))
    );

    console.log('Type Script types for Playwright auto generated type safe GQL client generated.');
}

async function main() {
    const argv = await yargs(hideBin(process.argv))
        .option('url', {
            alias: 'u',
            describe: 'Full GraphQL endpoint URL',
            type: 'array',
        })
        .option('header', {
            alias: 'h',
            describe: 'Optional authentication header for the get-graphql-schema command.',
            type: 'array',
        })
        .option('schema', {
            alias: 's',
            describe: 'Path to save the generated GraphQL schema file.',
            type: 'array',
            default: ['schema.gql'],
        })
        .option('gqlDir', {
            alias: 'd',
            describe: 'Path to save the auto generated GraphQL files.',
            type: 'string',
            default: 'gql',
        })
        .option('gqlFile', {
            alias: 'f',
            describe: 'Path to save the auto generated GraphQL queries and mutations and type script types.',
            type: 'array',
            default: ['graphql.ts'],
        })
        .option('codegen', {
            alias: 'c',
            describe: 'Path to save the codegen config to for type script types.',
            type: 'string',
            default: 'codegen.ts',
        })
        .option('saveCodegen', {
            describe: 'Pass to save codegen file.',
            type: 'boolean',
            default: false,
        })
        .option('custom', {
            describe: 'Pass to generate client from custom codegen.ts file.',
            type: 'boolean',
            default: false,
        })
        .option('raw', {
            describe: 'Pass to generate client with not type safe response.',
            type: 'boolean',
            default: false
        })
        .option('coverage', {
            describe: 'Will add coverage logger to auto-generated client.',
            type: 'boolean',
            default: false
        })
        .version()
        .help()
        .argv;

    if (argv.custom) {
        const codegen = await loadCodegenConfig({ configFilePath: argv.codegen });

        await generate(codegen.config, true);

        const gqlFiles = Object.keys(codegen.config.generates);

        await appendCode(gqlFiles, argv.coverage);
    } else {
        if (argv.url) {
            const result = await getSchemasFromUrls(argv.url, argv.schema, argv.header);

            if (!result) return;
        }

        const schemas = argv.schema as string[];

        for (const schema of schemas) {
            if (!existsSync(schema)) {
                console.log(`Schema file: "${argv.schema}" was not found.`);
                console.log('Exit with no generated output.');

                return;
            }
        }

        const buildOperationsPath = (schemaDir: string) => `${argv.gqlDir}/${schemaDir.split('.')[0]}/autogenerated-operations`;
        const operationsPaths: string[] = [];

        for (const schema of schemas) {
            const operationsPath = buildOperationsPath(schema);

            await runCommand(`gqlg --schemaFilePath ${schema} --destDirPath ${operationsPath} --depthLimit 8`);

            operationsPaths.push(operationsPath);

            console.log(`Operations were generated and saved to "${operationsPath}".`);
        }

        const convertToGlob = (paths: string[]) => paths.map(i => `${i}/**/*.gql`);
        const gqlFiles: string[] = (argv.gqlFile as string[]).map(file => `${argv.gqlDir}/${file.endsWith('.ts') ? file : `${file}.ts`}`);
        console.log({ schemas, operationsPaths, gqlFiles})
        if (!(schemas.length === operationsPaths.length && operationsPaths.length === gqlFiles.length)) {
            console.log('Count of passed schemas and gqlFiles should be equal.');

            return;
        }

        await generate(buildCodegenConfig(schemas, convertToGlob(operationsPaths), gqlFiles, argv.raw), true)

        await appendCode(gqlFiles, argv.coverage);

        if (argv.saveCodegen) {
            await configToFile(buildCodegenConfig(schemas, convertToGlob(operationsPaths), gqlFiles, argv.raw), argv.codegen);
            console.log(`File "${argv.codegen}" generated.`);
        }
    }
}

main().catch((err) => {
    console.error(err);
    process.exit(1);
});
